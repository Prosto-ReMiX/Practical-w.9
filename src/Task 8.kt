import java.util.*
import kotlin.concurrent.thread

class PizzaBox(private val capacity: Int) {
    private val box: Queue<String> = LinkedList()

    @Synchronized
    fun put(pizza: String) {
        while (box.size >= capacity) {
            (this as Object).wait() // –∂–¥–µ–º, –µ—Å–ª–∏ –∫–æ—Ä–æ–±–∫–∞ –ø–æ–ª–Ω–∞—è
        }
        box.add(pizza)
        println("üçï –ü–æ–≤–∞—Ä –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –ø–∏—Ü—Ü—É: $pizza (–≤ –∫–æ—Ä–æ–±–∫–µ: ${box.size})")
        (this as java.lang.Object).notifyAll()
    }

    @Synchronized
    fun take(): String {
        while (box.isEmpty()) {
            (this as Object).wait() // –∂–¥–µ–º, –µ—Å–ª–∏ –∫–æ—Ä–æ–±–∫–∞ –ø—É—Å—Ç–∞—è
        }
        val pizza = box.remove()
        println("üöö –ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –ø–∏—Ü—Ü—É: $pizza (–≤ –∫–æ—Ä–æ–±–∫–µ: ${box.size})")
        (this as java.lang.Object).notifyAll()
        return pizza
    }
}

fun main() {
    val pizzaBox = PizzaBox(5)

    // –ü–æ–≤–∞—Ä–∞
    repeat(2) { id ->
        thread {
            try {
                var pizzaId = 1
                while (!Thread.currentThread().isInterrupted) {
                    pizzaBox.put("–ü–∏—Ü—Ü–∞ #$pizzaId –æ—Ç –ø–æ–≤–∞—Ä–∞ $id")
                    pizzaId++
                    Thread.sleep(300) // –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
                }
            }
            catch (_: InterruptedException) {
                println("–ü–æ–≤–∞—Ä $id –ø–æ—à–µ–ª –¥–æ–º–æ–π")
            }
        }
    }

    // –ö—É—Ä—å–µ—Ä—ã
    repeat(3) { id ->
        thread {
            try {
                while (!Thread.currentThread().isInterrupted) {
                    pizzaBox.take()
                    Thread.sleep(500) // –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
                }
            }
            catch (_: InterruptedException) {
                println("–ö—É—Ä—å–µ—Ä $id –ø–æ—à–µ–ª –¥–æ–º–æ–π")
            }
        }
    }

    // –†–∞–±–æ—Ç–∞–µ–º 5 —Å–µ–∫—É–Ω–¥
    Thread.sleep(10000)
    println("‚èπ –ü–∏—Ü—Ü–µ—Ä–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è!")

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
    Thread.getAllStackTraces().keys
        .filter { it.name.contains("Thread") }
        .forEach { it.interrupt() }
}
